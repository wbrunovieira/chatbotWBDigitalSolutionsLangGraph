---
- name: Deploy WB Digital Solutions Chatbot
  hosts: chatbot_server
  become: yes
  gather_facts: yes

  vars:
    app_name: wb-chatbot
    repo_url: https://github.com/YOUR_GITHUB_USER/chatbotwbdigitalsolutions2MVP.git

  tasks:
    - name: Display deployment information
      debug:
        msg:
          - "Deploying to: {{ ansible_host }}"
          - "Application directory: {{ install_path }}"
          - "Domain: {{ chatbot_domain }}"
          - "App Port: {{ app_port }}"
          - "Qdrant Port: {{ qdrant_port }}"
          - "Redis Port: {{ redis_port }}"

    - name: Verify Docker is installed and running
      command: docker --version
      register: docker_check
      failed_when: docker_check.rc != 0

    - name: Verify Docker Compose is available
      command: docker compose version
      register: compose_check
      failed_when: compose_check.rc != 0

    - name: Create application directory structure
      file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      loop:
        - "{{ install_path }}"
        - "{{ install_path }}/volumes"
        - "{{ install_path }}/volumes/qdrant_data"
        - "{{ install_path }}/volumes/redis_data"
        - "{{ install_path }}/logs"
        - "{{ install_path }}/backups"

    - name: Clone or update repository
      git:
        repo: "{{ repo_url }}"
        dest: "{{ install_path }}"
        force: yes
        version: main
      when: repo_url != 'https://github.com/YOUR_GITHUB_USER/chatbotwbdigitalsolutions2MVP.git'

    - name: Check if Docker network exists
      command: docker network ls --format '{{ '{{' }}.Name{{ '}}' }}'
      register: docker_networks

    - name: Create Docker network if not exists
      command: docker network create {{ docker_network }}
      when: docker_network not in docker_networks.stdout_lines

    - name: Generate secure passwords if not provided
      set_fact:
        redis_password: "{{ redis_password | default(lookup('password', '/dev/null length=32 chars=ascii_letters,digits')) }}"
        qdrant_api_key: "{{ qdrant_api_key | default(lookup('password', '/dev/null length=32 chars=ascii_letters,digits')) }}"

    - name: Remove ALL old compose files FIRST
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ install_path }}/compose.yaml"
        - "{{ install_path }}/compose.yml"
        - "{{ install_path }}/docker-compose.yml"
        - "{{ install_path }}/docker-compose.yaml"
        - "{{ install_path }}/compose.local.yaml"
      ignore_errors: yes

    - name: Stop and remove conflicting containers
      shell: |
        docker stop wb_redis wb_qdrant 2>/dev/null || true
        docker rm wb_redis wb_qdrant 2>/dev/null || true
      ignore_errors: yes

    - name: Copy production environment file
      template:
        src: templates/env.j2
        dest: "{{ install_path }}/.env"
        mode: '0600'
        owner: root
        group: root

    - name: Copy production docker-compose file
      template:
        src: templates/docker-compose.prod.yml.j2
        dest: "{{ install_path }}/docker-compose.yml"
        mode: '0644'
        owner: root
        group: root

    - name: Copy application files if not using git
      synchronize:
        src: "{{ playbook_dir }}/../"
        dest: "{{ install_path }}/"
        rsync_opts:
          - "--exclude=.git"
          - "--exclude=ansible"
          - "--exclude=__pycache__"
          - "--exclude=.env"
          - "--exclude=volumes"
          - "--exclude=compose.yaml"
          - "--exclude=compose.yml"
          - "--exclude=compose.local.yaml"
          - "--exclude=docker-compose.override.yml"
          - "--exclude=docker-compose.local.yml"
      when: repo_url == 'https://github.com/YOUR_GITHUB_USER/chatbotwbdigitalsolutions2MVP.git'

    - name: List files in application directory
      command: ls -la
      args:
        chdir: "{{ install_path }}"
      register: dir_contents

    - name: Show directory contents
      debug:
        var: dir_contents.stdout_lines

    - name: Build Docker image
      command: docker compose -f docker-compose.yml build
      args:
        chdir: "{{ install_path }}"
      register: build_result

    - name: Stop existing containers
      command: docker compose -f docker-compose.yml down
      args:
        chdir: "{{ install_path }}"
      ignore_errors: yes

    - name: Start application containers
      command: docker compose -f docker-compose.yml up -d
      args:
        chdir: "{{ install_path }}"
      register: deploy_result
      ignore_errors: yes

    - name: Check container status
      command: docker ps -a
      register: container_status

    - name: Show container status
      debug:
        var: container_status.stdout_lines

    - name: Check Qdrant logs if unhealthy
      command: docker logs chatbot_qdrant --tail 50
      register: qdrant_logs
      ignore_errors: yes

    - name: Show Qdrant logs
      debug:
        var: qdrant_logs.stdout_lines
      when: qdrant_logs is defined

    - name: Wait for application to be healthy
      uri:
        url: "http://localhost:{{ app_port }}/health"
        status_code: 200
      register: result
      until: result.status == 200
      retries: 30
      delay: 10
      ignore_errors: yes

    - name: Install Nginx and Certbot
      apt:
        name:
          - nginx
          - certbot
          - python3-certbot-nginx
        state: present
        update_cache: yes

    - name: Remove old Nginx configurations if exists
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/nginx/sites-enabled/chatbot.wbdigitalsolutions.com.conf
        - /etc/nginx/sites-available/chatbot.wbdigitalsolutions.com.conf
      ignore_errors: yes

    - name: Configure Nginx for chatbot
      template:
        src: templates/nginx-chatbot.conf.j2
        dest: /etc/nginx/sites-available/chatbot.conf
        mode: '0644'

    - name: Enable Nginx site
      file:
        src: /etc/nginx/sites-available/chatbot.conf
        dest: /etc/nginx/sites-enabled/chatbot.conf
        state: link

    - name: Test Nginx configuration
      command: nginx -t
      register: nginx_config_test
      ignore_errors: yes

    - name: Reload Nginx
      systemd:
        name: nginx
        state: reloaded
      when: nginx_config_test.rc == 0

    - name: Setup SSL certificate with Certbot
      command: certbot --nginx -n --agree-tos --email {{ ssl_email }} -d {{ chatbot_domain }} --redirect
      register: ssl_result
      ignore_errors: yes
      when: ansible_host != "localhost" and ansible_host != "127.0.0.1"

    - name: Setup auto-renewal for SSL certificate
      cron:
        name: "Auto renew SSL certificates"
        job: "certbot renew --quiet --no-self-upgrade"
        minute: "0"
        hour: "2"
        weekday: "1"
      when: ssl_result is defined and ssl_result.rc == 0

    - name: Clean up old Docker images
      command: docker image prune -f
      ignore_errors: yes

    - name: Display deployment status
      debug:
        msg:
          - "=========================================="
          - "Deployment completed successfully!"
          - "=========================================="
          - "HTTPS URL: https://{{ chatbot_domain }}"
          - "HTTP URL: http://{{ chatbot_domain }}"
          - "Direct Access: http://{{ ansible_host }}:{{ app_port }}"
          - "=========================================="
          - "Qdrant Dashboard: http://{{ ansible_host }}:{{ qdrant_port }}/dashboard"
          - "=========================================="
          - "Test the API:"
          - "curl https://{{ chatbot_domain }}/health"
          - "=========================================="

    - name: Show container status
      command: docker ps --filter "name=chatbot"
      register: container_status

    - name: Display container status
      debug:
        var: container_status.stdout_lines